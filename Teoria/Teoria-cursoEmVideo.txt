JAVASCRIPT - CURSO EM VÍDEO

- MÓDULO A: CONHECENDO JAVASCRIPT

	- AULA 01: O QUE O JAVASCRIPT É CAPAZ DE FAZER?

		- Cliente: Computador, celular, tablet, etc..
		- conteudo: é aqulo que você na tela do seu aparelho;
		- Servidor: onde estão armazenados todos os arquivos e conteudos;
		
		- JavaScript pode atuar tanto no cliente como no servidor, mas na sua essencia, ela é uma linguagem de cliente (front-end);

	- Aula 02: Como chegamos até aqui?
		
		- JavaScript foi criado por Brendan Eich em 1995, a pedido da empresa NETSCAPE.
		- Ecmascript basicamente é a versão padronizada do JavaScript; tecnicamente são a mesma coisa, mas o EcmaScript tem atualizações frequentes.

		- DIFERENÇAS ENTRE JAVA E JAVASCRIPT?	
			
			- São totalmente diferentes; uma das poucas similaridades é que elas são baseadas na Linguagem C e foram criadas na mesma época.

	- Aula 03: Dando os primeiros passos

		- MANUAIS E REFERENCIAS: 

			1- guia de referencia da própria Mozilla;
		
				- LINK:  https://developer.mozilla.org/pt-BR/docs/Web/JavaScript

	- Aula 04: Criando o primeiro script

		- window.alert('Minha primeira Mensagem') -> Coloca um alerta na página; so tem uma opção de OK.
		- window.confirm('Está gostando de JavaScript?') -> Coloca um opção na pagina pra confirmar ou cancelar.
        		- window.prompt('Qual é o seu nome?') -> Interage com o usuário pedindo pra ele escrever algo.



- MÓDULO B: COMANDOS BÁSICOS DO JAVASCRIPT

	- AULA 01: VARIÁVEIS E TIPOS PRIMITIVOS

		- Comentários: 

			- //: comentário para uma única linha;
			- /* */: comentário para mais de uma linha;	
	
		- Variável: São espaços na memória RAM (geralmente) onde são armazenados os dados;

			- representado por:

				- var;
				- let; também é usado para armazenar variáveis.
		
		- Nós podemos delimitar uma strings por três formas:

			- "String";
			- 'String';
			- `String`;

		- Os nomes que damos às variáveis são chamados de IDENTIFICADORES.

			- As regas dos identificadores são as mesmas de C.

		- TIPOS PRIMITIVOS:

			- Number:
				-Infinity;
				-NaN;		
			- String;
			- Boolean;
			- Null;
			- Undefined;
			- Object;
				- Array;
			- Function;

			- typeof : mostra o tipo da variável;

	- AULA 02: TRATAMENTO DE DADOS

		- FORMAS DE DECLARAR UMA VARIÁVEL:

			- 1: VAR <nome_var>

			-2: LET <nome_var>

			-3: CONST <nome_var>

		- O sinal de "+" pode ser para concatenação e também para operação.

		- FORMATANDO STRING PARA NUMBER

			- parseInt()
			- parseFloat()
			- Number()

		- FORMATANDO NUMBER PARA STRING

			- String()	

		- FORMATANDO  STRINGS

			- 'eu estou aprendendo s' // não faz interpolação
			- "eu estou aprendendo " + s // usa concatenação/ junção
			- `eu estou aprendendo ${s}` // usa template string - forma mais atual

		- MANIPULANDO STRINGS
			
			- <nome_var>.length -> mostra o total de caracteres que a string tem.
			- <nome_var>.toUpperCase() -> coloca tudo em MAIÚSCULO
			- <nome_var>.toLowerCase() -> coloca tudo em MINÚSCULO
			
		- document.write() -> escreve algo na página
		- document.writeln() -> escreve algo na página e pula uma linha.

		- MANIPULANDO NUMBERS

			- <nome_var>.toFixed(<quantidade_de_casas_decimais>) -> manipula as casas decimais de um numero.
			- <nome_var>.replace("substitue algo", "por isso") -> substitue algo por outra coisa.
			- <nome_var>.toLocaleString("pt-BR", {style: "currency", currency: "BRL"}) -> coloca o numero em valor monetário.


	- AULA 03: OPERADORES
	
		- ARITMÉTICOS;

			+ : Adição;
			- : Subtração;
			* : Multiplicação;
			/ : Divisão (Assume valores decimais);
			% : Resto da divisão inteira; 					
			** : Potenciação (quadrado de um número);
		
			- PRECEDÊNCIA DO ARITMÉTICOS:

				1- () 
				2- **
				3- * ,  / ,  %
				4- +,  -


		- ATRIBUIÇÃO (' = ');

			- SIMPLES: 
			
				var  a = 3 => a recebe 3
				var  b = 5 + a => b recebe 8
				var  c = (b+2) / 2 => c recebe 5
				var  d = 10 - a / 2 => 8.5

			- AUTO-ATRIBUIÇÕES:

				var n = 3

				n = n * 2 | n *= 2 => todas as duas formas estão corretas, e significam a mesma coisas, só que uma é a simplificação da outra.

			- INCREMENTO:

				var n = 3

				INCREMENTO: n = n + 1 | n += 1 | n++ =>  todas as três formas estão corretas, e significam a mesma coisa, só que uma é a simplificação da outra.					
				DECREMENTO: n = n - 1 | n -= 1 | n-- => todas as três formas estão corretas, e significam a mesma coisa, só que uma é a simplificação da outra.
			
			- PRÉ-INCREMENTO:

				var n = 3
				
				n = n + 1 | n += 1 | ++n
	

		- RELACIONAIS;

			- Sempre retorna valor BOOLEAN (true or false);

			> : Maior;
			< : Menor;
			>= : Maior ou igual;
			<= : Menor ou igual;
			== : Igualdade;
			!= : Diferente;

			- Exemplo: 
		
				- 4 > 3 : TRUE
				- 5 < 1 : FALSE
			
			- Aritméticos tem precedência sobre os relacionais e lógicos;

			- IDENTIDADE:
	
				- SINAL : '=== '  (TRÊS SINAIS DE IGUAL);
					
				- Testa não só os elementos, mas até mesmo os seu tipo;
					
					- Exemplo: 
		
						- 5 == '5' : TRUE (pois, igualdade não considera tipagem na comparação)
						- 5 === '5'	 : FALSE (pois, há a comparação de tipagem, e NUMBER é dIferente de STRING)	


		- LÓGICOS;

			! : Negação
			&& : Conjunção (e);
			|| : Disjunção (ou);
			
			- PRECEDÊNCIA DOS LÓGICOS:

				1- ! : NEGAÇÃO
				2- && : CONJUNÇÃO (e)
				3- || : DISJUNÇÃO (ou)


		- TERNÁRIOS;

			- Sintaxe: "TESTE LÓGICO" ? <retorno para TRUE> : <retorno para FALSE>
			
				- Exemplo: 

					- 5 > 7 ? Verdade : Mentira

- MÓDULO C: ENTENDENDO O DOM

	- AULA 01: INTRODUÇÃO AO DOM

		- DOM (Document Object Model - Modelo de objetos para documentos): Dá acesso aos componentes internos do SITE; somente está presente quando roda JavaScript no navegador;
	
		- ÁRVORE DOM:

			1- Window : Tudo do JavaScript está dentro desta janela.

			2- 
				2.1 - Location : URL, página atual, página anterior.
				2.2- Document : frequentemente usado;
				2.3- History: Armazena a navegação e facilta ela dentro do próprio site;
					|
					|
					|

			3- HTML: 	Suas tags e seus aninhamentos;

		- Todos são elementos.	

		- Técnicas para acessar os elementos:

			- Por marca:  window.document.getElementsByTagName(<nome-da-tag>)
		
				- Seleciona os elementos da HTML por meio do nome da ta;

			- Por Id: window.document.getElementsById (<nome-da-tag>)

				- Seleciona os elementos da HTML por meio da Id  da tags dos elementos;

			- Por Nome: window.documento.getElementsByName(<nome-da-tag>)
	
				- Seleciona os elementos da HTML por meio do 'nome= " " ';
			
			- Por Class: window.documento.getElementsByClassName(<nome-da-tag>)

 				-  Seleciona os elementos da HTML por meio do Nome das Classes;

			- Por Seletor: window.documento.querySeletor('div#<nome-div>')

		- Exibindo (serve para todos):

			- window.document.write(<variável>.innerText) -> você pode usar para modificar o conteudo do HTML


	- AULA 02: EVENTOS DOM

		- DOM: É um facilitador, que existe dentro do HTML5 para dar acesso aos elementos para o JavaScript.

		- Evento DOM: é tudo aquilo que pode acontecer com os elementos da HTML.

		 - Site com uma lista de eventos possíveis para se fazer com o DOM: https://developer.mozilla.org/pt-BR/docs/Web/Events

		 - <nome_var>.addEventListener('ação', nome_da_função) : declara que um evento vai ocorrer quando a seguinte função for declarada.

		- Armazenando valor numerico em uma var: Number(<nome-da-var>. value)


-> MÓDULO D: CONDICIONAIS

	- AULA 01: ESTRUTURAS CONDICIONAIS (PARTE 01) : SIMPLES E COMPOSTA

		- SIMPLES:

			- if (<condição>){

				<true>

			}


		- COMPOSTA:

			- if (<condição>){

				<false>

			} 

	- AULA 02: ESTRUTURAS CONDICIONAIS (PARTE 02) : ANINHADAS E MÚLTIPLAS


		- CONDIÇÕES ANINHADAS:
	
			- if (<condição 01>) {

				<bloco 01>
			
			}else{
				
				if (<condição 02>) {

					<bloco 02>;

				}else{

					<bloco 03>;

				}	
			
			}

	
		- CONDIÇÕES MÚLTIPLAS:

			- Switch (<variável>){

				case 01: <bloco de  comandos 01>
				break

				case 02: <bloco de  comandos 02>
				break

				case 03: <bloco de  comandos 03>
				break

					:
					:
				default: <bloco de comandos padrão>
				break
	
			}

	
		- new Date(): Função em JS que serve para saber a hora, mes, ano, segundos e etc.
		- <nome.var>.get<valor-encontrar>: serve para acessar o valor da função new Date().


-> MÓDULO E: ESTRUTURAS DE REPETIÇÃO

	- AULA 01: ESTRUTURAS DE REPETIÇÃO (PARTE 01)
      
		- ESTRUTURA "WHILE": executa a repetição enquanto a repetição é verdadeira.

             			 while (<condição>){
                   			<Bloco de comandos>
              			 }

       		- ESTRUTURA "DO WHILE": executa pelo menos uma vez obrigatoriamente a execução; além disso, o laço é repetido até que a condição seja verdadeira.

              			do{
                  			<Bloco de comandos>
              			}while(<condição>)

       		 - Geralmente, são utilizadas quando você não sabe bem quando a quebra da condição vai ocorrer;

   	- AULA 02: ESTRUTURAS DE REPETIÇÃO (PARTE 02)

      		- ESTRUTURA "FOR":

        			for(<valor-inicial>;<valor-final>;<incremento>){  
             				<Bloco de comandos>
        			}

       		- Geralmente é usada quando você já tem um conhecimento prévio do momento da quebra do laço;

-> MÓDULO F: AVANÇANDO EM JAVASCRIPT

	- AULA 01: VARIÁVEIS COMPOSTAS

		 - Variáveis simples só consegue armazenar um valor por vez; Variáveis compostas devem ser capazes de armazenar
		vários valores em uma única variável.


		- SINTAXE: 

			- let <nome_da_variavel> = [valor1, valor2, valor3,  ...]
			- os índices(posição) do array, inicia com 0.

		- Alguns métodos importantes:

			- <variavel>.push() -> é um metodo no jS que acrescenta um valor no array em sua última posição.
			- <variavel>.sort() -> ordena o vetor de forma crecente.
			- <variavel>.length -> é uma atributo que mostra o total de espaços que a variável ocupa.
 			- <variavel>.indexOf() -> Faz busca em vetores.

	- AULA 02: FUNÇÕES

		- São ações executadas assim que são chamadas ou em decorrência de algum evento. 
		  Uma função pode receber parâmetros  e retornar um resultado.

		- SINTAXE:

      			- function nome_função(parâmetros){
          				<bloco de comandos>
          				return <resultado da função>
       			}

      			let = nome_funcao(parâmetros)

	- Aula 03: PRÓXIMOS PASSOS

		- Após esse curso, você deve se aprofundar nos seguintes temas:

	
			1- Functions;
			2- Objetos em JavaScript;
			3- Modularização;
			4- RegEx;
			5- Json;
			6- Ajax;
			7- NodeJS;


	- TIPOS DE FUNCTIONS:

		1- DECLARAÇÕES DE FUNÇÕES

		2- EXPRESSÕES DE FUNÇÕES
	
		3- ARROW FUNCTIONS

		4- SHORTHAND FUNCTIONS

		5- IIFE

		6- CONDITIONAL FUNCTIONS

		7- NEW FUNCTIONS








				
